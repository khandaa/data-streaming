# Kafka SQS Simulator Docker Compose Configuration
services:
  # Zookeeper Service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - streaming-network

  # Kafka Service
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - streaming-network

  # Topic Creator Service
  topic-creator:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: 
      - /bin/sh
      - -c
      - |
        echo "Waiting for Kafka to be ready..."
        cub kafka-ready -b kafka:9092 1 60
        echo "Creating topics..."
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic sqs-queue-1 --partitions 1 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic sqs-queue-2 --partitions 1 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic data-stream-output --partitions 1 --replication-factor 1 --config retention.ms=604800000
        echo "Topics created, container will exit now"
        exit 0
    networks:
      - streaming-network

  # Kafka UI for easier monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - streaming-network
      
  # Backend Service - SQS Simulator
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: data-streaming-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - FLASK_APP=src/app.py
      - FLASK_DEBUG=0
      - LOG_LEVEL=INFO
      # In production, use an environment file for sensitive configs
      # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    env_file:
      - ./backend/.env.docker
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # For development, mount volumes to get live code changes
    volumes:
      - ./backend:/app
    networks:
      - streaming-network
      
  # Frontend Service with React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: data-streaming-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - backend
    networks:
      - streaming-network

networks:
  streaming-network:
    driver: bridge
